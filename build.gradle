buildscript {
    ext.kotlin_version = kotlin_version
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("com.cinnober.gradle:semver-git:2.3.1")
        classpath("org.owasp:dependency-check-gradle:6.5.0.1")
    }
}
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "org.owasp.dependencycheck"

group group_id
version "$base_version$version_suffix"
archivesBaseName = "kestrel"
sourceCompatibility = project.targetJvmVersion
targetCompatibility = project.targetJvmVersion

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ["src/main/kotlin"]
    test.kotlin.srcDirs = test.java.srcDirs = ["src/test/java", "src/test/kotlin"]
}


task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

dependencyCheck {
    // anything over a 5.0 is above a 'warning'
    failBuildOnCVSS = 2.0F
    // this is the default, added here for clarity
    failOnError = true
    // if needed, a supression file can be added
    suppressionFile = file("$rootDir/owasp-suppression.xml").toString()
    analyzers.assemblyEnabled = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsUrl : releasesUrl
            credentials {
                username = System.getenv('SONATYPE_USERNAME')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = "kestrel"
            from components.java
            pom {
                name = "Kestrel"
                description = "Kotlin Framework for running event-sourced services"
                packaging = 'jar'
                url = 'https://github.com/cultureamp/kestrel'
                scm {
                    connection = 'scm:git@github.com:cultureamp/kestrel.git'
                    developerConnection = 'scm:git@github.com:cultureamp/kestrel.git'
                    url = 'https://github.com/cultureamp/kestrel'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'williamboxhall'
                        name = 'William Boxhall'
                        email = 'william.boxhall@cultureamp.com'
                    }
                }
            }
        }
    }
}
signing {
    def skipSigning = Boolean.valueOf(System.getenv("SKIP_SIGNING"))
    if (!skipSigning)
    {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}


test {
    useJUnitPlatform()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}


compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
        jvmTarget = project.targetJvmVersion
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = project.targetJvmVersion
}

dependencies {
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.12.5"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.12.5"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation "io.kotest:kotest-runner-junit5-jvm:4.6.2" // for kotest framework
    testImplementation "io.kotest:kotest-assertions-core-jvm:4.6.2" // for kotest core jvm assertions
    testImplementation "com.h2database:h2:1.4.200"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "joda-time:joda-time:2.10.10"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jodatime:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-json:$exposed_version"
    implementation "io.github.microutils:kotlin-logging:2.0.11"
    testImplementation "org.postgresql:postgresql:42.2.23"
    testImplementation 'org.testcontainers:postgresql:1.19.4'
    testRuntimeOnly("org.slf4j:slf4j-simple:2.0.9") // so the tests print out logs
}


